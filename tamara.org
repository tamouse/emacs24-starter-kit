#+STARTUP: content

* Personal Emacs Settings
** Additional Startup Kits
#+begin_src emacs-lisp
(starter-kit-load "yasnippet")
(starter-kit-load "ruby")
(setq ruby-use-smie nil)
(setq ruby-deep-indent-paren nil)       ; make indents in ruby more normal, a la
                                        ; sublime 
;;; Usable hide/show support in ruby mode
(add-to-list 'hs-special-modes-alist
             '(ruby-mode
               "\\(def\\|do\\|{\\)" "\\(end\\|end\\|}\\)" "#"
               (lambda (arg) (ruby-end-of-block)) nil))


(starter-kit-load "perl")
(starter-kit-load "js")

#+end_src
** Other Packages
- org mode
  #+begin_src emacs-lisp
    (setq org-default-notes-file (expand-file-name "~/Dropbox/org/notes.org"))
    (setq org-directory "~/Dropbox/org/")
    (setq org-capture-templates
          (quote
           (("j" "Journal Entry" entry
             (file+datetree+prompt "~/Dropbox/journal.org")
             "* %^{headline}\n" :clock-in t :clock-resume t)
            ("c" "Capture Clipboard" entry
             (file "~/Dropbox/notes.org")
             "* %?\n  %x\n  link: %a\n  captured_on: %U\n" :empty-lines 1)
            ("I" "Insulin Dose" entry
             (file+datetree+prompt "~/Dropbox/todo/glucose.org")
             "* %^{insulin dosage?} %^g")
            ("s" "selection" entry
             (file "~/Dropbox/notes.org")
             "* %? %^g\n  %i\n  link: %a\n  captured_on: %U\n" :empty-lines 1)
            ("Q" "Quotes" entry
             (file "~/Dropbox/quotes.org")
             "* %^{Headline:}\n%i\n%a\n" :empty-lines 1)
            ("t" "todo" entry
             (file "~/Dropbox/todo/inbox.org")
             "* TODO %?\n  created_on: %U\n  link: %a\n" :clock-in t :clock-resume t))))
    (setq org-export-backends (quote (ascii html icalendar latex md)))

  #+end_src



- markdown mode
  #+begin_src emacs-lisp
    (require 'markdown-mode)
    (add-to-list 'auto-mode-alist '("\\.\\(md\\|markdown\\)" . markdown-mode))
  #+end_src
  
- time-stamp
  #+begin_src emacs-lisp
    (require 'time-stamp)
    (add-hook 'before-save-hook 'time-stamp)
    (setq time-stamp-active t)
  #+end_src

- apache mode
  #+begin_src emacs-lisp
(autoload 'apache-mode "apache-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.htaccess\\'"   . apache-mode))
(add-to-list 'auto-mode-alist '("httpd\\.conf\\'"  . apache-mode))
(add-to-list 'auto-mode-alist '("srm\\.conf\\'"    . apache-mode))
(add-to-list 'auto-mode-alist '("access\\.conf\\'" . apache-mode))
(add-to-list 'auto-mode-alist '("sites-\\(available\\|enabled\\)/" . apache-mode))
    
  #+end_src

- sass mode
  #+begin_src emacs-lisp
    (starter-kit-install-if-needed 'sass-mode)
    (require 'sass-mode)
  #+end_src

- scss mode
  #+begin_src emacs-lisp
    (starter-kit-install-if-needed 'scss-mode)
    (require 'scss-mode)
    (setq scss-compile-at-save nil) ; this bugs me so much
  #+end_src
  
** Key Bindings
#+begin_src emacs-lisp
  (define-key global-map "\C-x\C-c" 'save-buffer-kill-buffer)
  (define-key global-map "\C-x4q" 'save-buffers-kill-terminal)
  (define-key global-map (kbd "M-SPC") 'fixup-whitespace)
  (define-key global-map "\C-x\C-o" 'delete-blank-lines)
  (define-key global-map "\C-cf" 'auto-fill-mode)
  (define-key global-map "\C-cc" 'org-capture)
  (define-key global-map "\M-g-RET" 'goto-line)
  (define-key global-map "\C-z" nil) ; i *HATE* this
#+end_src

** Functions
#+name: defuns
#+begin_src emacs-lisp
;; Because I like using ^x^c to save the buffer and kill the file
(defun save-buffer-kill-buffer ()
  (interactive)
  (if (and
       (buffer-file-name (current-buffer))
       (buffer-modified-p (current-buffer)))
      (save-buffer (current-buffer)))
  (kill-buffer (current-buffer)))


;;; return the time as YYYY-MM-DD HH:MM
(defun jekyll-time-string ()
  "Return the current time or given time in epoc seconds as a string used by Jekyll posts: YYYY-MM-DD HH:MM"
  (format-time-string "%Y-%m-%d %H:%M")
  )

;;; insert jekyll time string
(defun insert-jekyll-time-string ()
  "Insert the formatted Jekyll time string"
  (interactive)
  (insert (concat "date: " (jekyll-time-string)))
  )

;;; snakify
(defun snakify-text (start end)
  "Convert text to a snake-case symbol"
  (interactive "r")
  (progn
    (downcase-region start end)
    (subst-char-in-region start end ?  ?_)
    )
  )

;;; camelize
(defun camelize (s)
  "Convert snakified string to CamelCase."
  (interactive "s")
  (if (stringp s)
      (mapconcat 'capitalize (split-string s "_") nil)
    nil)
  )

;;; camelize-file-name
(defun camelize-file-name ()
  "Convert the current buffer's file base name to CamelCase"
  (interactive)
  (if (stringp (buffer-file-name))
      (camelize (file-name-base (buffer-file-name)))
    nil)
  )

;;; indent-buffer does indent-region on the entire buffer
(defun indent-buffer ()
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max)))
  )

#+end_src

** Personal Settings
#+begin_src emacs-lisp
(setq user-mail-address "tamouse@gmail.com")
(setq user-organization "Tamara Temple Web Development")
(setq user-home-page    "http://blog.tamouse.org")
(setq user-signature    (concat user-full-name " <" user-mail-address ">"))
#+end_src

** ERC Configuration
#+begin_src emacs-lisp
(require 'erc)
(setq erc-hide-list '("JOIN" "PART" "QUIT"))
(setq erc-kill-buffer-on-part t)
(setq erc-kill-queries-on-quit t)
(setq erc-autojoin-channels-alist
   (quote
    (("freenode.net" "#emacs" "#ruby" "#jekyll" "#RubyonRails-offtopic" "#callahans" "#RubyOnRails" "#rubyonrails-offtopic" "#ruby.mn")
     ("foonetic.net" "#xkcdfurs"))))
(setq erc-autojoin-delay 5)
(setq erc-email-userid "tamouse@gmail.com")
(setq erc-modules
   (quote
    (autoaway autojoin button completion fill irccontrols list log match menu move-to-prompt netsplit networks noncommands readonly ring stamp track)))
(setq erc-nick "pontiki")
(setq erc-nick-uniquifier "_")
(setq erc-user-full-name user-full-name)
#+end_src
** Misc Settings
#+begin_src emacs-lisp
(menu-bar-mode t)
(global-linum-mode t)
(setq fill-column 80)
(electric-pair-mode t)
(setq ido-auto-merge-delay-time 3)
(setq netrc-file "~/.netrc")


#+end_src

** Colour Themes
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/color-theme-6.6.0")
(require 'color-theme)
(color-theme-initialize)
(color-theme-charcoal-black)
#+end_src
** Servers
#+begin_src emacs-lisp
  (server-start)
#+end_src
